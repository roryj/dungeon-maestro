AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    sam-app

    Sample SAM Template for sam-app
    
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
    Function:
        Timeout: 3

Parameters:
    Stage:
        Description: The stage for the function
        Type: String
        Default: beta

Resources:

    DungeonMaestroFunction:
        Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
        Properties:
            CodeUri: ./
            Handler: maestro
            Runtime: go1.x
            Role: !GetAtt DungeonMaestroFunctionRole.Arn
            Tracing: Active
            Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
                Variables:
                    Stage: !Ref Stage
                    Region: !Ref AWS::Region
            Events:
                DungeonMaestro:
                    Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
                    Properties:
                        Path: /
                        Method: ANY

    DungeonMaestroFunctionRole:
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                -   Action:
                    - sts:AssumeRole
                    Effect: Allow
                    Principal:
                        Service:
                        - lambda.amazonaws.com
                Version: '2012-10-17'
            Policies:
            -   PolicyDocument:
                    Statement:
                    -   Action:
                        - secretsmanager:ListSecrets
                        - secretsmanager:DescribeSecret
                        - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                            Fn::Sub: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${Stage}/dungeonMaestro*
                    Version: '2012-10-17'
                PolicyName: DungeonMaestroSlackWebhookKeyAccess
            -   PolicyDocument:
                    Statement:
                    -   Action:
                        - logs:CreateLogGroup
                        - logs:CreateLogStream
                        - logs:PutLogEvents
                        Effect: Allow
                        Resource: '*'
                    Version: '2012-10-17'
                PolicyName: DungeonMaestroLambdaBasicExecution
            -   PolicyDocument:
                    Statement:
                    -   Action:
                        - xray:PutTraceSegments
                        - xray:PutTelemetryRecords
                        Effect: Allow
                        Resource: '*'
                    Version: '2012-10-17'
                PolicyName: DungeonMaestroXRayAccess
        Type: AWS::IAM::Role

    # Secrets Manager setup
    DungeonMaestroEncryptionKey:
        Properties:
            Description: Encryption key for secret config values for the Dungeon Maestro values
            EnableKeyRotation: false
            Enabled: true
            KeyPolicy:
                Id: dungeon-maestro-key-v1
                Statement:
                -   Action:
                    - kms:Create*
                    - kms:Encrypt
                    - kms:Describe*
                    - kms:Enable*
                    - kms:List*
                    - kms:Put*
                    - kms:Update*
                    - kms:Revoke*
                    - kms:Disable*
                    - kms:Get*
                    - kms:Delete*
                    - kms:ScheduleKeyDeletion
                    - kms:CancelKeyDeletion
                    Effect: Allow
                    Principal:
                        AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
                    Resource: '*'
                    Sid: Allow administration of the key & encryption of new values
                -   Action:
                    - kms:Encrypt
                    - kms:Decrypt
                    - kms:ReEncrypt*
                    - kms:GenerateDataKey*
                    - kms:DescribeKey
                    Effect: Allow
                    Principal:
                        AWS: !GetAtt DungeonMaestroFunctionRole.Arn
                    Resource: '*'
                    Sid: Allow use of the key
                Version: '2012-10-17'
        Type: AWS::KMS::Key
    DungeonMaestroEncryptionKeyAlias:
        Properties:
            AliasName: alias/DungeonMaestroKey
            TargetKeyId: !GetAtt DungeonMaestroEncryptionKey.Arn
        Type: AWS::KMS::Alias

Outputs:

    DungeonMaestroApi:
      Description: "API Gateway endpoint URL for Prod stage for Hello World function"
      Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

    DungeonMaestroFunction:
      Description: "Hello World Lambda Function ARN"
      Value: !GetAtt DungeonMaestroFunction.Arn

    HelloWorldFunctionIamRole:
      Description: "Implicit IAM Role created for Hello World function"
      Value: !GetAtt DungeonMaestroFunctionRole.Arn
